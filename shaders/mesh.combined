#shader vertex

#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require

#include "input_structures.glsl"

layout (location = 0) out vec3 out_normal;
layout (location = 1) out vec3 out_color;
layout (location = 2) out vec2 out_uv;

struct Vertex {
    vec3 position;
    float uv_x;
    vec3 normal;
    float uv_y;
    vec4 color;
};

layout (buffer_reference, std430) readonly buffer VertexBuffer {
    Vertex vertices[];
};

layout (push_constant) uniform PushConstants {
    mat4 world_matrix;
    VertexBuffer vertex_buffer;
} push_constants;

void main() {
    Vertex v = push_constants.vertex_buffer.vertices[gl_VertexIndex];
    vec4 position = vec4(v.position, 1.0f);
    gl_Position = scene_data.viewproj * push_constants.world_matrix * position;

    out_normal = v.normal;
    out_color = v.color.rgb * material_data.color_factors.rgb;
    out_uv = vec2(v.uv_x, v.uv_y);
}

#shader fragment

#version 450

#extension GL_GOOGLE_include_directive : require

#include "input_structures.glsl"

layout (location = 0) in vec3 in_normal;
layout (location = 1) in vec3 in_color;
layout (location = 2) in vec2 in_uv;

layout (location = 0) out vec4 f_color;

void main() {
    float light_value = max(dot(in_normal, scene_data.sunlight_direction.xyz), 0.1f);

    vec3 color = in_color * texture(color_tex, in_uv).rgb;
    vec3 ambient = color * scene_data.ambient_color.rgb;

    f_color = vec4(color * light_value * scene_data.sunlight_color.w + ambient, 1.0f);
}
